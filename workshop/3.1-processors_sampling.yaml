receivers:
  otlp:
    protocols:
      grpc:
      http:

processors:
  batch:
  memory_limiter:
    check_interval: 5s
    limit_mib: 4000
    spike_limit_mib: 500

  # Data sources: traces
  probabilistic_sampler:
    sampling_percentage: 20

  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies: [
        { # Rule 1: use always_sample policy for services that don't belong to team_a and are not ready to use tail sampling
          name: backwards-compatibility-policy,
          type: and,
          and:
            {
              and_sub_policy:
                [
                  {
                    name: services-using-tail_sampling-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: service.name,
                        values:
                          [
                            list,
                            of,
                            services,
                            using,
                            tail_sampling,
                          ],
                        invert_match: true,
                      },
                  },
                  { name: sample-all-policy, type: always_sample },
                ],
            },
        },
        # BEGIN: policies for team_a
        { # Rule 2: low sampling for readiness/liveness probes
          name: team_a-probe,
          type: and,
          and:
            {
              and_sub_policy:
                [
                  {
                    # filter by service name
                    name: service-name-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: service.name,
                        values: [service-1, service-2, service-3],
                      },
                  },
                  {
                    # filter by route
                    name: route-live-ready-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: http.route,
                        values: [/live, /ready],
                        enabled_regex_matching: true,
                      },
                  },
                  {
                    # apply probabilistic sampling
                    name: probabilistic-policy,
                    type: probabilistic,
                    probabilistic: { sampling_percentage: 0.1 },
                  },
                ],
            },
        },
        { # Rule 3: low sampling for a noisy endpoint
          name: team_a-noisy-endpoint-1,
          type: and,
          and:
            {
              and_sub_policy:
                [
                  {
                    name: service-name-policy,
                    type: string_attribute,
                    string_attribute:
                      { key: service.name, values: [service-1] },
                  },
                  {
                    # filter by route
                    name: route-name-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: http.route,
                        values: [/v1/name/.+],
                        enabled_regex_matching: true,
                      },
                  },
                  {
                    # apply probabilistic sampling
                    name: probabilistic-policy,
                    type: probabilistic,
                    probabilistic: { sampling_percentage: 1 },
                  },
                ],
            },
        },
        { # Rule 4: high sampling for other endpoints
          name: team_a-service-1,
          type: and,
          and:
            {
              and_sub_policy:
                [
                  {
                    name: service-name-policy,
                    type: string_attribute,
                    string_attribute:
                      { key: service.name, values: [service-1] },
                  },
                  {
                    # invert match - apply to all routes except the ones specified
                    name: route-name-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: http.route,
                        values: [/v1/name/.+],
                        enabled_regex_matching: true,
                        invert_match: true,
                      },
                  },
                  {
                    # apply probabilistic sampling
                    name: probabilistic-policy,
                    type: probabilistic,
                    probabilistic: { sampling_percentage: 100 },
                  },
                ],
            },
        },
        { # Rule 5: always sample if there is an error
          name: team_a-status-policy,
          type: and,
          and:
            {
              and_sub_policy:
                [
                  {
                    name: service-name-policy,
                    type: string_attribute,
                    string_attribute:
                      {
                        key: service.name,
                        values:
                          [
                            list,
                            of,
                            services,
                            using,
                            tail_sampling,
                          ],
                      },
                  },
                  {
                    name: trace-status-policy,
                    type: status_code,
                    status_code: { status_codes: [ERROR] },
                  },
                ],
            },
        },
        { # Rule 6: always sample if the force_sample attribute is set to true
          name: team_a-force-sample,
          type: boolean_attribute,
          boolean_attribute: { key: app.force_sample, value: true },
        },
        # END: policies for team_a
      ]

exporters:
  otlp:
    endpoint: otelcol:4317

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, probabilistic_sampler, tail_sampling, batch]
      exporters: [otlp]
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp]
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp]
